import { ObjectID } from 'mongodb';
import { FilterQuery, Model } from 'mongoose';
import { IAuthenticatedUser } from '../authentication/jwt.strategy';
import { ConversationCacheManagerService } from '../cache-manager/conversation-cache-manager.service';
import { ChatConversationDocument, ChatConversationModel } from './models/conversation.model';
import { LastReadDocument } from './models/lastRead.model';
import { CreateChatConversationDto, Tag } from './models/CreateChatConversation.dto';
import { AddMemberDTO } from './models/AddMember.dto';
import { LastRead } from './models/LastRead.entity';
import { LastReadInput } from './models/LastReadInput.dto';
import { Permission } from './models/Permission.dto';
import { ContextSchema, Product } from './models/ContextSchema.dto';
import { UnreadCountInput, UnreadCountOutput } from './models/unreadCount.dto';
import { LastMessageInput, LastMessageOutput } from './models/lastMessage.dto';
import { MessageData } from '../message/message.data';
export interface IConversationData {
    addMember(conversationId: string, addMember: AddMemberDTO): Promise<ChatConversationModel>;
    removeMember(conversationId: string, memberId: string): Promise<ChatConversationModel>;
    blockMember(conversationIds: string[], memberId: string): Promise<void>;
    unblockMember(conversationIds: string[], memberId: string): Promise<void>;
    create(data: CreateChatConversationDto): Promise<ChatConversationModel>;
    updateTags(conversationId: string, tags: Tag[]): Promise<ChatConversationModel>;
    getConversation(conversationId: string): Promise<ChatConversationModel>;
    getConversationsForInbox(userId: string, contexts: ContextSchema[]): Promise<ChatConversationModel[]>;
    listConversationIds(query: FilterQuery<ChatConversationDocument>): Promise<string[]>;
    migratePermissions(chatPermissionsDto: Permission[], product: Product, conversationIds: string[]): Promise<void>;
    updateConversationWithLastMessage(conversationId: string, messageId: ObjectID): Promise<ChatConversationModel>;
    getLastRead(authenticatedUser: IAuthenticatedUser, conversationId: string): Promise<LastRead>;
    recordLastMessageReadByUser({ conversationId, messageId, authenticatedUser, }: LastReadInput): Promise<LastRead>;
    getUnreadMessageCounts({ userId, conversationIds, }: UnreadCountInput): Promise<UnreadCountOutput[]>;
    getUnreadCountInConversation(userId: string, conversationId: string): Promise<number>;
    getLastMessages({ userId, conversationIds, }: LastMessageInput): Promise<LastMessageOutput[]>;
    pinMessage(conversationId: string, messageId: ObjectID): Promise<ChatConversationModel>;
    unpinMessage(conversationId: string, messageId: ObjectID): Promise<ChatConversationModel>;
}
export declare class ConversationData implements IConversationData {
    private chatConversationModel;
    private lastReadModel;
    private conversationCacheManagerService;
    private messageData;
    constructor(chatConversationModel: Model<ChatConversationDocument>, lastReadModel: Model<LastReadDocument>, conversationCacheManagerService: ConversationCacheManagerService, messageData: MessageData);
    addMember(conversationId: string, addMember: AddMemberDTO): Promise<ChatConversationModel>;
    removeMember(conversationId: string, memberId: string): Promise<ChatConversationModel>;
    blockMember(conversationIds: string[], memberId: string): Promise<void>;
    unblockMember(conversationIds: string[], memberId: string): Promise<void>;
    create(data: CreateChatConversationDto): Promise<ChatConversationModel>;
    createChatConversation(data: ChatConversationModel): Promise<ChatConversationModel>;
    updateTags(conversationId: string, tags: Tag[]): Promise<ChatConversationModel>;
    getConversation(conversationId: string): Promise<ChatConversationModel>;
    getConversationsForInbox(userId: string, contexts: ContextSchema[]): Promise<ChatConversationModel[]>;
    getConversationByAllMemberIdsAndContext(memberIds: string[], contexts: ContextSchema[]): Promise<ChatConversationModel | null>;
    listConversationIds(query: FilterQuery<ChatConversationDocument>): Promise<string[]>;
    migratePermissions(chatPermissionsDto: Permission[], product: Product, conversationIds: string[]): Promise<void>;
    updateConversationWithLastMessage(conversationId: string, messageId: ObjectID): Promise<ChatConversationModel>;
    getLastRead(authenticatedUser: IAuthenticatedUser, conversationId: string): Promise<LastRead>;
    recordLastMessageReadByUser({ conversationId, messageId, authenticatedUser, }: LastReadInput): Promise<LastRead>;
    getUnreadMessageCounts({ userId, conversationIds, }: UnreadCountInput): Promise<UnreadCountOutput[]>;
    getUnreadCountInConversation(userId: string, conversationId: string): Promise<number>;
    getLastMessages({ userId, conversationIds, }: LastMessageInput): Promise<LastMessageOutput[]>;
    pinMessage(conversationId: string, messageId: ObjectID): Promise<ChatConversationModel>;
    unpinMessage(conversationId: string, messageId: ObjectID): Promise<ChatConversationModel>;
}
