import { IAuthenticatedUser } from '../authentication/jwt.strategy';
import { PermissionsService } from '../permissions/permissions.service';
import { Permission } from './models/Permission.dto';
import { Context, ContextSchema, Product } from './models/ContextSchema.dto';
import { UnreadCountInput, UnreadCountOutput } from './models/unreadCount.dto';
import { LastMessageInput, LastMessageOutput } from './models/lastMessage.dto';
import { LastRead } from './models/LastRead.entity';
import { LastReadInput } from './models/LastReadInput.dto';
import { ConversationData } from './conversation.data';
import { CreateChatConversationDto, Tag } from './models/CreateChatConversation.dto';
import { AddMemberDTO } from './models/AddMember.dto';
import { pinMessageDTO, unpinMessageDTO } from './models/pinnedMessages.dto';
import { ChatConversationModel } from './models/conversation.model';
import { MessageLogic } from '../message/message.logic';
import { ConversationChannel } from './conversation-channel.socket';
import { SafeguardingService } from '../safeguarding/safeguarding.service';
import { UserService } from '../user/user.service';
import { DirectChatConversationDto } from './dto/DirectChatConversationDto';
import { MessageGroupedByConversationOutput, MessagesFilterInput } from './models/messagesFilterInput';
export interface IConversationLogic {
    getConversation(id: string, authenticatedUser: IAuthenticatedUser): Promise<ConversationDTO>;
    getConversationsForInbox(authenticatedUser: IAuthenticatedUser, contexts: Context[]): Promise<ConversationDTO[]>;
    removeMember(conversationId: string, memberId: string): Promise<ChatConversationModel>;
    addMember(conversationId: string, addMember: AddMemberDTO): Promise<ChatConversationModel>;
    pinMessage(pinMessageDTO: pinMessageDTO, authenticatedUser: IAuthenticatedUser): Promise<ChatConversationModel>;
    unpinMessage(unpinMessageDTO: unpinMessageDTO, authenticatedUser: IAuthenticatedUser): Promise<ChatConversationModel>;
    blockMember(conversationIds: string[], memberId: string): Promise<void>;
    unblockMember(conversationIds: string[], memberId: string): Promise<void>;
    create(createChatConversationDto: CreateChatConversationDto): Promise<ConversationDTO>;
    migratePermissions(chatPermissionsDto: Permission[], product: Product, conversationIds: string[]): Promise<void>;
    recordLastMessageReadByUser(lastReadInput: LastReadInput): Promise<LastRead>;
    getLastRead(authenticatedUser: IAuthenticatedUser, conversationId: string): Promise<LastRead>;
    getUnreadMessageCounts(unreadCountInput: UnreadCountInput): Promise<UnreadCountOutput[]>;
    getUnreadCountInConversation(authenticatedUser: IAuthenticatedUser, conversationId: string): Promise<number>;
    getLastMessages(lastMessageInput: LastMessageInput): Promise<LastMessageOutput[]>;
    updateTags(conversationId: string, tags: Tag[]): Promise<ConversationDTO>;
    getMessagesByConversation(messagesFilterInput: MessagesFilterInput): Promise<MessageGroupedByConversationOutput[]>;
}
export declare type ConversationDTO = ChatConversationModel;
export declare class ConversationLogic implements IConversationLogic {
    private conversationData;
    private permissions;
    private messageLogic;
    private conversationChannel;
    private safeguardingService;
    private userService;
    constructor(conversationData: ConversationData, permissions: PermissionsService, messageLogic: MessageLogic, conversationChannel: ConversationChannel, safeguardingService: SafeguardingService, userService: UserService);
    getConversation(id: string, authenticatedUser: IAuthenticatedUser): Promise<ConversationDTO>;
    isDirectConversation(contexts: ContextSchema[]): boolean;
    getConversationsForInbox(authenticatedUser: IAuthenticatedUser, contexts: Context[]): Promise<ConversationDTO[]>;
    removeMember(conversationId: string, memberId: string): Promise<ChatConversationModel>;
    addMember(conversationId: string, addMember: AddMemberDTO): Promise<ChatConversationModel>;
    pinMessage(pinMessageDTO: pinMessageDTO, authenticatedUser: IAuthenticatedUser): Promise<ChatConversationModel>;
    unpinMessage(unpinMessageDTO: unpinMessageDTO, authenticatedUser: IAuthenticatedUser): Promise<ChatConversationModel>;
    blockMember(conversationIds: string[], memberId: string): Promise<void>;
    unblockMember(conversationIds: string[], memberId: string): Promise<void>;
    create(createChatConversationDto: CreateChatConversationDto): Promise<ConversationDTO>;
    getExistingDirectConversation(memberIds: string[]): Promise<ChatConversationModel | null>;
    createDirectChatConversation(directChatConversationDto: DirectChatConversationDto): Promise<ConversationDTO>;
    private setDirectMessageContextIfNeeded;
    migratePermissions(chatPermissionsDto: Permission[], product: Product, conversationIds: string[]): Promise<void>;
    recordLastMessageReadByUser({ conversationId, messageId, authenticatedUser, }: LastReadInput): Promise<LastRead>;
    getLastRead(authenticatedUser: IAuthenticatedUser, conversationId: string): Promise<LastRead>;
    getUnreadMessageCounts(unreadCountInput: UnreadCountInput): Promise<UnreadCountOutput[]>;
    getUnreadCountInConversation(authenticatedUser: IAuthenticatedUser, conversationId: string): Promise<number>;
    getLastMessages(lastMessageInput: LastMessageInput): Promise<LastMessageOutput[]>;
    updateTags(conversationId: string, tags: Tag[]): Promise<ConversationDTO>;
    private sendPinMessageEvent;
    getMessagesByConversation(messagesFilterInput: MessagesFilterInput): Promise<MessageGroupedByConversationOutput[]>;
}
